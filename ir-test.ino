// This #include statement was automatically added by the Spark IDE.
#include "IRremote.h"

// This include was carried over from the tinker source code - but its already included in IRremote.cpp ?
// #include "application.h"

// IR library used : https://github.com/qwertzguy/Spark-Core-IRremote

// IMPORTANT / WARNING : Difference between arduino and spark core library below
// You can control multiple emitters (eg. IRsend irsendSqueezebox(D3) )
IRsend irsend(D1);

// Defining this here so it can be read as a spark.variable
int btnNumber = 0;
 
// just added my own array for the raw signal of the AC
// unsigned int acTemp28[148] = {4400,4300,600,1550,550,1600,550,1550,600,1550,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,1550,600,1550,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,1550,600,1550,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,1550,550,1600,550,500,600,1550,550,1600,550,500,600,450,600,500,600,450,550,550,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,500,550,1550,600,1550,600,500,550,500,600,500,550,500,600};
const uint16_t acTemp27[148] = {4400,4300,550,1600,550,1550,600,1550,600,1550,600,500,550,500,600,1550,550,500,600,500,600,450,600,450,600,500,600,1550,550,1600,550,500,600,1550,550,500,600,500,550,500,600,450,600,500,600,450,600,1550,600,1550,600,1550,550,1600,550,1550,600,1550,600,1550,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,1550,600,500,550,1600,550,500,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,550,550,550,1550,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,1600,550,500,600,1550,550,500,600,500,550,500,600,500,550,500,600}; 
const uint16_t acTemp26[148] = {4400,4300,600,1550,550,1600,550,1550,600,1550,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,1550,600,1550,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,1550,550,1600,600,500,550,500,550,500,600,500,550,500,600,500,550,500,600,450,600,500,550,1600,550,1600,550,500,600,450,600,1550,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,1550,550,500,600,500,550,1550,600,500,550,500,600,500,550,500,600}; 
const uint16_t acTemp25[148] = {4400,4300,550,1600,550,1550,600,1550,600,1550,600,500,550,500,600,1550,550,500,600,500,550,500,600,450,600,500,600,1550,550,1600,550,500,600,1550,550,500,600,500,550,500,600,450,600,500,600,450,600,1550,600,1550,600,1550,550,1600,550,1550,600,1550,600,1550,600,1550,550,500,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,1550,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,500,550,500,550,500,600,1550,600,500,550,500,550,500,600,500,550,500,550,550,550,500,600}; 
const uint16_t acTemp24[148] = {4400,4250,600,1550,600,1550,550,1600,550,1550,600,500,600,450,600,1550,600,500,550,500,600,450,600,500,550,500,600,1550,600,1550,600,450,600,1550,600,500,550,500,600,450,600,500,550,500,600,500,550,1550,600,1550,600,1550,550,1600,600,1550,600,1550,550,1550,600,1550,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,600,450,600,1550,550,500,600,1550,600,1550,600,1550,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,500,550,500,600,450,600,1550,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,500,550,500,550,1600,550,1600,550,1550,600,500,600,450,550,550,550,500,600}; 
const uint16_t acTemp23[148] = {4400,4300,600,1500,600,1550,600,1550,600,1550,550,500,600,500,550,1600,550,500,600,450,600,500,600,450,600,500,550,1600,550,1550,600,500,600,1550,550,500,600,450,600,500,600,450,600,500,550,500,600,1550,600,1550,550,1600,550,1550,600,1550,600,1550,600,1550,600,1550,550,500,550,550,550,500,600,450,600,500,550,500,600,500,550,500,600,500,550,1550,600,500,550,1600,550,1550,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,500,550,500,550,500,600,500,600,450,600,500,550,500,600,500,550,500,600,1550,550,1600,550,500,600,450,600,500,600,450,550,550,550}; 
const uint16_t acTemp22[148] = {4350,4300,600,1550,550,1600,550,1550,600,1550,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,1550,600,1550,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,1550,600,1550,600,450,600,500,550,500,600,500,550,500,600,500,550,500,600,450,600,500,550,1600,550,500,600,1550,600,450,600,1550,600,500,600,450,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,550,1600,600,500,550,1550,600,500,550,500,600,500,550,500,600}; 
// unsigned int acTemp21[148] = {4450,4250,600,1550,600,1550,550,1600,600,1500,600,500,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,1550,600,1550,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,500,550,1550,600,1550,550,1600,600,1550,600,1550,550,1600,550,1550,600,1550,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,1550,550,500,550,1600,600,450,600,500,600,450,600,500,550,500,600,500,550,500,550,500,600,500,550,500,600,500,550,500,600,450,600,1550,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600}; 
// unsigned int acTemp20[148] = {4400,4250,550,1600,600,1550,600,1550,550,1600,550,500,600,450,600,1550,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,450,600,1550,600,500,550,500,600,500,550,500,600,450,650,450,550,1600,550,1550,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,450,600,500,600,1550,550,1600,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,1550,600,1550,550,500,600,500,550,500,600,450,600}; 
// unsigned int acTemp19[148] = {4400,4250,600,1550,600,1550,600,1550,600,1550,550,500,600,500,550,1550,600,500,550,500,600,500,550,500,600,450,600,1550,550,1600,600,500,550,1550,600,500,550,500,600,500,550,500,600,450,600,500,550,1600,550,1600,550,1550,600,1550,550,1600,600,1550,550,1600,550,1550,650,450,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,450,600,500,600,1550,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,500,600,450,600,500,550,500,600,500,550}; 
// unsigned int acTemp18[148] = {4400,4250,600,1550,600,1550,600,1550,550,1600,550,500,600,450,600,1550,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,450,600,1550,600,500,550,500,600,450,600,500,600,450,600,500,550,1600,550,1550,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,500,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,500,550,1600,600,450,600,500,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,1550,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,1550,600,450,600,500,550,500,600,500,550}; 
// max fan too for acTemp17
const uint16_t acTemp17[148] = {4400,4300,600,1550,550,1550,600,1550,600,1550,600,500,550,500,600,1550,550,500,600,500,550,500,550,500,600,500,600,1550,550,1600,550,500,600,1550,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,1550,550,1600,550,1600,550,1550,600,1550,600,1550,600,1550,550,500,550,550,550,500,600,500,550,500,600,450,600,500,550,500,550,550,550,1550,600,500,550,500,600,500,550,500,600,500,550,500,600,450,600,500,550,1600,550,1550,600,500,550,500,600,500,550,500,600,450,600,1550,600,500,550,500,550,550,550,500,600,450,600,500,550,500,600,500,550,1550,600,1550,550,550,550,500,600,500,550,500,600,450,600,500,550}; 
const uint16_t acOff[148] = {4400,4250,650,1500,600,1550,600,1550,550,1600,550,500,600,450,600,1550,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,450,600,1550,600,500,550,500,550,550,550,500,600,450,600,500,550,1600,550,1550,600,1550,600,1550,600,1550,600,1550,550,1600,550,1550,600,500,550,500,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,1550,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,1550,600,450,650,450,550,500,600,500,550,500,600,450,600,500,600,450,600,500,550,500,600,500,550,500,600,450,600,1550,600,1550,600,450,600}; 

// Function prototypes for tinker
int tinkerDigitalWrite(String command);
/* int tinkerDigitalRead(String pin);
int tinkerAnalogRead(String pin);
int tinkerAnalogWrite(String command); */

void setup() {
    
    //Register all the Tinker functions for app control
	Spark.function("digitalwrite", tinkerDigitalWrite);
	/* Spark.function("digitalread", tinkerDigitalRead);
	Spark.function("analogread", tinkerAnalogRead);
	Spark.function("analogwrite", tinkerAnalogWrite); */
	
	// For the IR (i think its required?)
    Serial.begin(9600);
    
    //test
    pinMode(D7, OUTPUT);
    
  Spark.variable("btnNumb", &btnNumber, INT);
}


 
void loop() {
      
      digitalWrite(D7, HIGH);
      delay(400);
      digitalWrite(D7, LOW);
      delay(800);
      
      // Later : Put in a sleep function to save battery?
}


int tinkerDigitalWrite(String command)
{
	//convert ascii to integer (to get the number of the button pressed)
	btnNumber = command.charAt(1) - '0';
	

	if(command.startsWith("D"))
	{
	    if(btnNumber == 0)
	    {
	        digitalWrite(D7, HIGH);
            delay(2500);
	        
	    }
	    else if(btnNumber == 1)
	    {
	        digitalWrite(D7, LOW);
            delay(2500);
	    } 

        
       irsend.sendRaw(acTemp27,148,38);
        
		return 1;
	}
	else if(command.startsWith("A"))
	{
    	// Add code here if you need to use more than 7 buttons in the Android app
    	return 1;
	}
	else return -1;
}